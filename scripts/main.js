// 1. Задать температуру в градусах по Цельсию. Вывести в alert соответствующую температуру в градусах по Фаренгейту. 
// Подсказка: расчёт идёт по формуле: Tf = (9 / 5) * Tc + 32, где Tf – температура по Фаренгейту, Tc – температура по Цельсию
function fahren(Tc) {
    // Tc = 23
    Tf = (9 / 5) * Tc + 32
    return Tf
}
alert = fahren(40)
console.log(alert)


// 2. Работа с переменными.
// 3. Объявить две переменные: admin и name. Записать в name строку "Василий"; Скопировать значение из name в admin. Вывести admin (должно вывести «Василий»).
name = "Василий"
admin = name
console.log(admin)


// 4. *Чему будет равно JS-выражение 1000 + "108"/
console.log(1000 + "108")
// Ответ: 1000108


// 5. *Самостоятельно разобраться с атрибутами тега script (async и defer)
// https://learn.javascript.ru/script-async-defer

// defer
// Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме, 
// а затем запустить этот скрипт, когда он загрузится.
// Атрибут defer предназначен только для внешних скриптов
// Атрибут defer будет проигнорирован, если в теге <script> нет src.

// async
// Атрибут async означает, что скрипт абсолютно независим:

// Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
// Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
// DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный скрипт завершит загрузку после того, как страница будет готова),
// …так и после асинхронного скрипта (если он короткий или уже содержится в HTTP-кеше)
// Остальные скрипты не ждут async, и скрипты casync не ждут другие скрипты.
// Так что если у нас есть несколько скриптов с async, они могут выполняться в любом порядке. То, что первое загрузится – запустится в первую очередь:
